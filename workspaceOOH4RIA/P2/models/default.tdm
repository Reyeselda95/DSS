ConceptualModel default { 
	
	Enumeration OrderStatus
	{
		("pending", 1), ("sent", 2),("received",3), ("cancelled",4)
	};
	
	
	Class Customer 
	{
		attributes
		{
			private oid idnumber : String;
			private firstName : String;
			private email:String;
			private password:String;
			private lastName:String;
			private address:String;
			private telephone:String;
			private zip:String; 		
		}
		
		operations
		{
			public login (p_oid : OID -> Customer, pass:String) : Boolean;
			public getCustomerByOID::ReadOID (p_oid : OID -> Customer) : Object -> Customer;
			public createCustomer::New (p_idnumber : String, p_firstName : String, p_email : String, p_password : String, p_lastName : String, p_address : String, p_telephone : String, p_zip : String) : Object->Customer;
			public deleteCustomer::Destroy (p_oid : OID -> Customer) : Void;
			public modifyCustomer::Modifier (p_oid : OID -> Customer, p_firstName : String, p_email : String, p_password : String, p_lastName : String, p_address : String, p_telephone : String, p_zip : String) : Void;
		}
	};
	
	
	Association customerOrder ( Customer - CustomerOrder )
	{
		=> navigable order ( "0", "*");
		<= navigable customer ( "1", "1");
	};
	
	
	Class CustomerOrder 
	{
		attributes
		{
			private oid orderId : Integer;
			private date : Date;
			private address:String;
			private city:String;
			private state:String;
			private zip:String;
			private paymentMethod:String;
			private status:OrderStatus;
		}
		
		operations
		{
			public addOrderLine::Relationer->CustomerOrderLine.orderLine (p_customerorder : OID -> CustomerOrder, p_orderline : List<OID -> OrderLine>) : Void;
			public rderLine::Unrelationer->CustomerOrderLine.orderLine (p_customerorder : OID -> CustomerOrder, p_orderline : List<OID -> OrderLine>) : Void;
			public getAllOrders::ReadAll (/* No arguments */) : List<Object->CustomerOrder>;
			public getByOID::ReadOID (p_oid : OID -> CustomerOrder) : Object -> CustomerOrder;
			public createOrder::New (p_orderId : Integer, p_date : Date, p_address : String, p_city : String, p_state : String, p_zip : String, p_paymentMethod : String, p_status : OrderStatus) : Object->CustomerOrder;
			public deleteOrder::Destroy (p_oid : OID -> CustomerOrder) : Void;
			public modifyOrder::Modifier (p_oid : OID -> CustomerOrder, p_date : Date, p_address : String, p_city : String, p_state : String, p_zip : String, p_paymentMethod : String, p_status : OrderStatus) : Void;
		}
	};
	
	
	Association CustomerOrderLine ( CustomerOrder - OrderLine )
	{
		=> navigable orderLine:Composite ( "0", "*");
		<= navigable order ( "1", "1");
	};
	
	
	Class OrderLine 
	{
		attributes
		{
			private oid id : Autogenerated;
			private quantity : Integer;
			private number : Integer;
		}
		
		operations
		{
			public createOrderLine::New (p_quantity : Integer, p_number : Integer) : Object->OrderLine;
			public modifyLine::Modifier (p_oid : OID -> OrderLine, p_quantity : Integer, p_number : Integer) : Void;
		}
	};
	
	
	Association LineProduct ( OrderLine - Product )
	{
		=> navigable product ( "1", "1");
		<= navigable orderline ( "0", "*");
	};
	
	
	Class Product 
	{
		attributes
		{
			private oid productId : Integer;
			private name : String;
			private descripcion : String;
			private photoURL:String;
			private price:Float;
			private stock:Integer;			
		}
		
		operations
		{
			public increaseStock (p_oid : OID -> Product,stockup:Integer) : Void;
			public decreaseStock (p_oid : OID -> Product,stockdown:Integer) : Void;
			public getAllProducts::ReadAll (/* No arguments */) : List<Object->Product>;
			public create::New (p_productId : Integer, p_name : String, p_descripcion : String, p_photoURL : String, p_price : Float, p_stock : Integer) : Object->Product;
			public delete::Destroy (p_oid : OID -> Product) : Void;
			public modify::Modifier (p_oid : OID -> Product, p_name : String, p_descripcion : String, p_photoURL : String, p_price : Float, p_stock : Integer) : Void;
		}
	};
	
	
	Association categoryProduct ( Product - Category )
	{
		=> navigable category ( "1", "1");
		<= navigable product ( "0", "*");
	};

	
	Class Category 
	{
		attributes
		{
			private oid categoryId : Integer;
			private name : String;
			private descripcion:String;			
		}
		
		operations
		{
			public create::New (p_categoryId : Integer, p_name : String, p_descripcion : String) : Object->Category;
			public delete::Destroy (p_oid : OID -> Category) : Void;
			public modify::Modifier (p_oid : OID -> Category, p_name : String, p_descripcion : String) : Void;
		}
	};


	Association recursiveCategory ( Category - Category )
	{
		=> navigable parentCategory ( "0", "1");
		<= navigable subCategory ( "0", "*");
	};
		
}